<Project>

    <Target
        Name="GetSqlProjectOutputItems"
        BeforeTargets="GetCopyToOutputDirectoryItems">
        <MSBuild
            Condition="'%(Extension)' == '.sqlproj' AND '%(ProjectReferenceWithConfiguration.CopySqlProjectOutput)' == 'true'"
            Projects="@(ProjectReferenceWithConfiguration)"
            Targets="SqlBuild;GetTargetPath;GetSqlTargetPath;GetSqlReferenceCopyLocalPaths"
            BuildInParallel="$(BuildInParallel)"
            Properties="
                %(ProjectReferenceWithConfiguration.SetConfiguration);
                %(ProjectReferenceWithConfiguration.SetPlatform);
                SQLDBExtensionsRefPath=$(MSBuildThisFileDirectory)">
            <Output TaskParameter="TargetOutputs" ItemName="_SqlProjectOutput" />
        </MSBuild>
        <Message Text="_SqlProjectOutput: @(_SqlProjectOutput)" Importance="high" />
        <ItemGroup>
            <SqlProjectItems Include="@(_SqlProjectOutput)" Condition=" '%(Extension)' != '.dacpac' " />
        </ItemGroup>
        <Copy SourceFiles="@(_SqlProjectOutput)" DestinationFiles="@(_SqlProjectOutput->'$(IntermediateOutputPath)\%(RecursiveDir)%(Filename)%(Extension)')" Condition=" '%(Extension)' == '.dacpac' " />
        <UpdateDacPacModelReferencePathsToRelative Target="@(_SqlProjectOutput->'$(IntermediateOutputPath)\%(RecursiveDir)%(Filename)%(Extension)')"  Condition=" '%(Extension)' == '.dacpac' " />
        <ItemGroup>
            <SqlPackageItems Include="@(_SqlProjectOutput->'$(IntermediateOutputPath)\%(RecursiveDir)%(Filename)%(Extension)')" Condition=" '%(Extension)' == '.dacpac' " />
        </ItemGroup>
        <Message Text="SqlPackageItems: @(SqlPackageItems)" Importance="high" />
        <ItemGroup>
            <ContentWithTargetPath Include="@(SqlPackageItems)">
                <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
                <TargetPath>%(Filename)%(Extension)</TargetPath>
            </ContentWithTargetPath>
            <ContentWithTargetPath Include="@(SqlProjectItems)">
                <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
                <TargetPath>%(Filename)%(Extension)</TargetPath>
            </ContentWithTargetPath>
        </ItemGroup>
    </Target>

    <!-- modifies data inside the DACPAC which is build-location relative -->
    <Target Name="UpdateDacPacModelReferencePaths" AfterTargets="SqlBuild">
        <UpdateDacPacModelReferencePathsToRelative Target="$(SqlTargetPath)" />
    </Target>

    <UsingTask
        TaskName="UpdateDacPacModelReferencePathsToRelative"
        TaskFactory="CodeTaskFactory"
        AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <Target />
        </ParameterGroup>
        <Task>
            <Reference Include="System.Xml" />
            <Reference Include="System.Xml.Linq" />
            <Reference Include="WindowsBase" />
            <Using Namespace="System" />
            <Using Namespace="System.IO" />
            <Using Namespace="System.IO.Packaging" />
            <Using Namespace="System.Linq" />
            <Using Namespace="System.Security.Cryptography" />
            <Using Namespace="System.Xml" />
            <Using Namespace="System.Xml.Linq" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                
                XNamespace xns = XNamespace.Get("http://schemas.microsoft.com/sqlserver/dac/Serialization/2012/02");
                Package pkg = Package.Open(Target);
                
                XmlWriterSettings xmlWriterSettings = new XmlWriterSettings()
                {
                    Indent = true,
                    IndentChars = "\t",
                    CloseOutput = true,
                };
                
                Uri originUri = new Uri("/Origin.xml", UriKind.Relative);
                PackagePart originPart = pkg.GetPart(originUri);
                Stream originStream = originPart.GetStream();
                XDocument origin = XDocument.Load(originStream);
                originStream.Close();

                Uri modelUri = new Uri("/model.xml", UriKind.Relative);
                PackagePart modelPart = pkg.GetPart(modelUri);
                Stream modelStream = modelPart.GetStream(FileMode.Open);
                XDocument model = XDocument.Load(modelStream);
                modelStream.Close();

                foreach (XElement fileName in model
                    .Elements(xns + "DataSchemaModel")
                    .Elements(xns + "Header")
                    .Elements(xns + "CustomData")
                    .Where(i => (string)i.Attribute("Category") == "Reference")
                    .Elements(xns + "Metadata")
                    .Where(i => (string)i.Attribute("Name") == "FileName" || (string)i.Attribute("Name") == "AssemblySymbolsName"))
                    if ((string)fileName.Attribute("Value") != null)
                        if (Path.IsPathRooted((string)fileName.Attribute("Value")))
                            fileName.SetAttributeValue("Value", Path.GetFileName((string)fileName.Attribute("Value")));

                pkg.DeletePart(modelUri);
                modelPart = pkg.CreatePart(modelUri, "text/xml", CompressionOption.Maximum);
                using (XmlWriter wrt = XmlWriter.Create(modelPart.GetStream(), xmlWriterSettings))
                    model.Save(wrt);

                pkg.Flush();
                var hash = BitConverter.ToString(SHA256.Create().ComputeHash(pkg.GetPart(modelUri).GetStream())).Replace("-", "");

                var modelChecksum = origin
                    .Elements(xns + "DacOrigin")
                    .Elements(xns + "Checksums")
                    .Elements(xns + "Checksum")
                    .FirstOrDefault(i => (string)i.Attribute("Uri") == modelUri.ToString());

                if (modelChecksum == null)
                    throw new InvalidOperationException("Could not locate model checksum.");
                modelChecksum.Value = hash;

                pkg.DeletePart(originUri);
                originPart = pkg.CreatePart(originUri, "text/xml", CompressionOption.Maximum);
                using (XmlWriter wrt = XmlWriter.Create(originPart.GetStream(), xmlWriterSettings))
                    origin.Save(wrt);

                pkg.Flush();
                pkg.Close();
                
                ]]>
            </Code>
        </Task>
    </UsingTask>

</Project>
