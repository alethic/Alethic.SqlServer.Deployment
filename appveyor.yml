image: Visual Studio 2022
configuration: Release
platform: Any CPU

cache:
  - 'packages'
  - '%USERPROFILE%\.nuget\packages'
  - '%TEMP%\SQL2019'

install:
  - choco install gitversion.portable -y
  #- choco install sql-server-express -y
  - ps: |-
      Start-Process C:\Windows\System32\msiexec.exe -ArgumentList '/i "https://download.microsoft.com/download/7/c/1/7c14e92e-bdcb-4f89-b7cf-93543e7112d1/SqlLocalDB.msi" /qn /norestart /log install.log IACCEPTSQLLOCALDBLICENSETERMS=YES' -Wait
      Start-Sleep -Seconds 5
      Restart-Computer -Force
      Start-Sleep -Seconds 5
  #- ps: |-
  #    if (!(Test-Path "$env:TEMP\SQL2019\SQL2019-SSEI-Dev.exe")) {
  #      mkdir "$env:TEMP\SQL2019" -Force | Out-Null
  #      Invoke-WebRequest -Uri "https://download.microsoft.com/download/d/a/2/da259851-b941-459d-989c-54a18a5d44dd/SQL2019-SSEI-Dev.exe" -OutFile "$env:TEMP\SQL2019\SQL2019-SSEI-Dev.exe"
  #    }
  #    if (!(Test-Path "$env:TEMP\SQL2019\setup\SQLServer2019-DEV-x64-ENU.exe")) {
  #      mkdir "$env:TEMP\SQL2019\setup" | Out-Null
  #      & "$env:TEMP\SQL2019\SQL2019-SSEI-Dev.exe" /Quiet /Action=Download /MediaType=CAB /MediaPath="$env:TEMP\SQL2019\setup" | Out-Null
  #    }
  #    if (!(Test-Path "$env:TEMP\SQL2019\media\express.install")) {
  #      Remove-Item "$env:TEMP\SQL2019\media" -Recurse -Force -ErrorAction SilentlyContinue
  #      & "$env:TEMP\SQL2019\setup\SQLServer2019-DEV-x64-ENU.exe" /q /x:"$env:TEMP\SQL2019\media" | Out-Null
  #      "" | Set-Content -Path "$env:TEMP\SQL2019\media\express.install"
  #    }

before_build:
  - ps: $env:IGNORE_NORMALISATION_GIT_HEAD_MOVE=1
  - ps: gitversion /l console /output buildserver
  - ps: $env:PackageVersion=$env:GitVersion_NuGetVersion
  - ps: $env:AssemblyVersion=$env:GitVersion_AssemblySemVer
  - ps: $env:FileVersion=$env:GitVersion_MajorMinorPatch.0
  - ps: $env:InformationalVersion=$env:GitVersion_InformationalVersion
  - ps: $env:PackageOutputPath="$env:APPVEYOR_BUILD_FOLDER\pkg"
  - nuget restore
  - dotnet restore

build:
  verbosity: minimal
  project: Alethic.SqlServer.Deployment.sln

before_test:
  - ps: |-
      $p = Resolve-Path 'Alethic.SqlServer.Deployment.runsettings'
      $x = Select-Xml -Path $p -XPath '//RunSettings/TestRunParameters/Parameter[@name="SqlSetupExePath"]'
      $x.Node.value = "$env:TEMP\SQL2019\media\setup.exe"
      $x.Node.OwnerDocument.Save($p)

test_script:
  - cmd: vstest.console /logger:Appveyor /settings:Alethic.SqlServer.Deployment.runsettings "Alethic.SqlServer.Deployment.Tests\bin\Release\net472\Alethic.SqlServer.Deployment.Tests.dll"
  - cmd: vstest.console /logger:Appveyor /settings:Alethic.SqlServer.Deployment.runsettings "Alethic.SqlServer.Deployment.Tests\bin\Release\net6.0\Alethic.SqlServer.Deployment.Tests.dll"

artifacts:
  - path: pkg\*.nupkg
    name: Alethic.SqlServer.Deployment

deploy:
  - provider: NuGet
    server: https://nuget.pkg.github.com/alethic/index.json
    username: wasabii
    api_key:
      secure: ynz3NTx4QcecEKyrBhIUtvG2lxSORrFEhwe4if7ORBN6YW5UI0Jb95/k/3r1uGpd
    skip_symbols: false
    symbol_server:
    artifact: /.*\.nupkg/